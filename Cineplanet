import java.util.*;
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.file.Paths;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.List;

class Producto {
    String nombre;
    double precioUnitario;
    String butaca;
    int cantidad;

    public Producto(String nombre, double precioUnitario, String butaca, int cantidad) {
        this.nombre = nombre;
        this.precioUnitario = precioUnitario;
        this.butaca = butaca;
        this.cantidad = cantidad;
    }

    public double getPrecioTotal() {
        return precioUnitario * cantidad;
    }
}

public class Colbox {

    static ArrayList<Producto> carrito = new ArrayList<>();
    static ArrayList<String> categorias = new ArrayList<>();
    static ArrayList<String> peliculas2d = new ArrayList<>();
    static ArrayList<String> ciudades = new ArrayList<>();
    static ArrayList<Producto> titanic = new ArrayList<>();
    static ArrayList<Producto> tanos = new ArrayList<>();
    static ArrayList<Producto> lufi = new ArrayList<>();
    static String[][] mapaButaca = new String[10][15];
    static ArrayList<Producto> combosFamiliares = new ArrayList<>();
    static ArrayList<Producto> mixto = new ArrayList<>();
    static ArrayList<Producto> promociones = new ArrayList<>();

    static Scanner chuqui = new Scanner(System.in);

    public static void main(String[] args) {
        inicializarMapaButacas();

        ciudades.add("Lima");
        ciudades.add("Arequipa");
        ciudades.add("Cusco");
        ciudades.add("Puno");
        ciudades.add("Huancavelica");
        ciudades.add("Moquegua");

        categorias.add("Peliculas 2D");
        categorias.add("Peliculas 3D");
        categorias.add("Peliculas Premium");

        peliculas2d.add("Titanic");
        titanic.add(new Producto("Titanic Niño", 6, "", 0));
        titanic.add(new Producto("Titanic Adulto", 10, "", 0));

        peliculas2d.add("Thanos");
        tanos.add(new Producto("Thanos Niño", 6, "", 0));
        tanos.add(new Producto("Thanos Adulto", 10, "", 0));

        peliculas2d.add("Lufi");
        lufi.add(new Producto("Lufi Niño", 6, "", 0));
        lufi.add(new Producto("Lufi Adulto", 10, "", 0));

        combosFamiliares.add(new Producto("Combo Familiar - Promo 1", 12.00, "1 Popcorn Grande + 2 Refrescos", 1));
        combosFamiliares.add(new Producto("Combo Familiar - Promo 2", 15.00, "1 Popcorn Grande + 2 Refrescos + 1 Dulce", 1));
        combosFamiliares.add(new Producto("Combo Familiar - Promo 3", 18.00, "2 Popcorn Grandes + 2 Refrescos + 2 Dulces", 1));


        mixto.add(new Producto("Galletas", 5.00, "", 1));
        mixto.add(new Producto("Caramelos", 3.00, "", 1));
        mixto.add(new Producto("Chocolate", 7.00, "", 1));


        promociones.add(new Producto("Promo - Cancha más Inka", 12.00, "", 1));
        promociones.add(new Producto("Promo - Cancha Familiar", 15.00, "", 1));
        promociones.add(new Producto("Promo - Cancha más Hotdog y Gaseosa Familiar", 25.00, "", 1));

        System.out.println("""
                🎞🎞🎞🎞🎞🎞🎞🎞🎞🎞🎞🎞🎞🎞🎞🎞🎞🎞🎞🎞🎞🎞🎞🎞🎞🎞🎞🎞🎞🎞🎞🎞🎞🎞🎞🎞🎞🎞🎞🎞🎞🎞🎞🎞🎞🎞🎞🎞
                🎞🎞                       Bienvenido a  "CinePlanet"                      🎞🎞
                🎞🎞🎞🎞🎞🎞🎞🎞🎞🎞🎞🎞🎞🎞🎞🎞🎞🎞🎞🎞🎞🎞🎞🎞🎞🎞🎞🎞🎞🎞🎞🎞🎞🎞🎞🎞🎞🎞🎞🎞🎞🎞🎞🎞🎞🎞🎞🎞
                """);

        ciudadesPelicula();
    }

    public static void ciudadesPelicula() {
        System.out.println("        ====================================================");
        System.out.println("Elija su ciudad:");

        for (int i = 0; i < ciudades.size(); i++) {
            System.out.println((i + 1) + ". " + ciudades.get(i));
        }
        System.out.println((ciudades.size() + 1) + ". Salir");

        int accion = pedirOpcion(ciudades.size() + 1);

        if (accion == ciudades.size() + 1) {
            System.out.println("====== ¡Vuelva pronto! ======");
            System.exit(0);
        } else {
            tipoDePelicula();
        }
    }

    public static void tipoDePelicula() {
        System.out.println("\nPelículas");
        System.out.println("Seleccione una película:");
        for (int i = 0; i < categorias.size(); i++) {
            System.out.println((i + 1) + ". " + categorias.get(i));
        }
        System.out.println((categorias.size() + 1) + ". Regresar");

        int opcion = pedirOpcion(categorias.size() + 1);

        if (opcion == categorias.size() + 1) {
            ciudadesPelicula();
        } else if (opcion == 1) {
            peliculas2D();
        } else if (opcion == 2) {

        } else if (opcion == 3) {

        }
    }

    public static void peliculas2D() {
        System.out.println("\n----------------------------------- Películas 2D -----------------------------------");
        System.out.println("Seleccione una película:");

        for (int i = 0; i < peliculas2d.size(); i++) {
            System.out.println((i + 1) + ". " + peliculas2d.get(i));
        }
        System.out.println(peliculas2d.size() + 1 + ". Regresar");

        int opcion = pedirOpcion(peliculas2d.size() + 1);

        if (opcion == peliculas2d.size() + 1) {
            tipoDePelicula();
        } else {
            manejarSubcategoriaAudio(opcion);
        }
    }

    public static void manejarSubcategoriaAudio(int opcion) {
        if (opcion == 1) {
            System.out.println("Tenemos los siguientes precios para Titanic:");
            System.out.println("=====================================================");
            seleccionarPersona("Titanic");
        } else if (opcion == 2) {
            System.out.println("Tenemos los siguientes precios para Thanos:");
            System.out.println("=====================================================");
            seleccionarPersona("Thanos");
        } else if (opcion == 3) {
            System.out.println("Tenemos los siguientes precios para Lufi:");
            System.out.println("=====================================================");
            seleccionarPersona("Lufi");
        }
    }

    public static void seleccionarPersona(String pelicula) {
        System.out.println("\nElija el tipo de persona:");
        System.out.println("1. Niño (50% de descuento)");
        System.out.println("2. Adulto (Precio completo)");
        System.out.println("3. Socio (Descuento de 10 soles)");

        int tipo = pedirOpcion(3);
        double precio = 0;
        double precioFinal = 0;

        if (pelicula.equals("Titanic")) {
            precio = 10;
        } else if (pelicula.equals("Thanos")) {
            precio = 10;
        } else if (pelicula.equals("Lufi")) {
            precio = 10;
        }

        if (tipo == 1) {
            precioFinal = precio / 2;
        } else if (tipo == 2) {
            precioFinal = precio;
        } else if (tipo == 3) {
            precioFinal = precio - 10;
        }

        System.out.println("¿Cuántos asientos desea reservar?");
        int cantidadAsientos = pedirOpcion(15);

        for (int i = 0; i < cantidadAsientos; i++) {
            String productoSeleccionado = seleccionarButaca(pelicula);
            carrito.add(new Producto(pelicula, precioFinal, productoSeleccionado, 1));
        }

        mostrarCarrito();

        System.out.println("¿Desea agregar más asientos? (1. Sí / 2. No)");
        int respuesta = pedirOpcion(2);

        if (respuesta == 1) {
            seleccionarPersona(pelicula);
        } else {
            opcionesPago();
        }
    }

    public static String seleccionarButaca(String producto) {
        mostrarMapaButacas();
        System.out.println("\nSeleccione una butaca para " + producto + ":");
        Scanner scanner = new Scanner(System.in);
        String butacaSeleccionada;

        while (true) {
            System.out.print("Ingrese el asiento (Ejemplo: A1, B3): ");
            butacaSeleccionada = scanner.next().toUpperCase();
            if (validarButaca(butacaSeleccionada)) {
                marcarButacaComoOcupada(butacaSeleccionada);
                break;
            } else {
                System.out.println("La butaca no está disponible o es inválida. Intente de nuevo.");
            }
        }
        return butacaSeleccionada;
    }

    public static boolean validarButaca(String butaca) {
        if (butaca.length() < 2) return false;
        char fila = butaca.charAt(0);
        int columna = Integer.parseInt(butaca.substring(1)) - 1;

        if (fila < 'A' || fila > 'J' || columna < 0 || columna > 14) {
            return false;
        }

        int filaIndex = fila - 'A';
        return mapaButaca[filaIndex][columna].equals("○");
    }

    public static void marcarButacaComoOcupada(String butaca) {
        char fila = butaca.charAt(0);
        int columna = Integer.parseInt(butaca.substring(1)) - 1;

        int filaIndex = fila - 'A';
        mapaButaca[filaIndex][columna] = "X";

        mostrarMapaButacas();
    }

    public static void mostrarMapaButacas() {
        System.out.println("\nMapa de Butacas:");
        System.out.println("     1  2  3  4  5  6  7  8  9 10 11 12 13 14 15");
        for (int i = 0; i < mapaButaca.length; i++) {
            System.out.print((char) ('A' + i) + "   ");
            for (int j = 0; j < mapaButaca[i].length; j++) {
                System.out.print(mapaButaca[i][j] + "  ");
            }
            System.out.println();
        }
    }

    public static int pedirOpcion(int maxOpcion) {
        int opcion;
        while (true) {
            try {
                opcion = Integer.parseInt(chuqui.nextLine());
                if (opcion < 1 || opcion > maxOpcion) {
                    System.out.println("Opción inválida, intente nuevamente.");
                } else {
                    break;
                }
            } catch (NumberFormatException e) {
                System.out.println("Por favor ingrese un número válido.");
            }
        }
        return opcion;
    }

    public static void opcionesPago() {
        System.out.println("¿Desea proceder con el pago?");
        System.out.println("1. Sí, proceder con el pago.");
        System.out.println("2. Agregar dulces.");

        int opcion = pedirOpcion(2);
        if (opcion == 1) {
            pedirdatoscompra();
        } else {
            agregarDulces();
        }
    }


    public static void agregarDulces() {
        System.out.println("Elija el tipo de combo que desea agregar:");
        System.out.println("1. Promo");
        System.out.println("2. Familiar");
        System.out.println("3. Mixto");
        System.out.println("4. Regresar");

        int opcionCombo = pedirOpcion(4);

        switch (opcionCombo) {
            case 1:
                agregarpromo();
                break;
            case 2:
                agregarComboFamiliar();
                break;
            case 3:
                agregarmixto();
                break;
            case 4:

                break;
            default:
                System.out.println("intenta nuevamente");
                agregarDulces();
                break;
        }
    }

    public static void agregarpromo() {
        System.out.println("\nElija un Combo Familiar:");
        for (int i = 0; i < promociones.size(); i++) {
            Producto combo = promociones.get(i);
            System.out.println((i + 1) + ". " + combo.nombre + " - S/ " + combo.precioUnitario + " (" + combo.butaca + ")");
        }
        System.out.println((promociones.size() + 1) + ". Regresar");

        int opcion = pedirOpcion(promociones.size() + 1);

        if (opcion == promociones.size() + 1) {

        } else {
            Producto comboSeleccionado = promociones.get(opcion - 1);
            System.out.println("¿Cuántos " + comboSeleccionado.nombre + " desea?");
            int cantidad = pedirCantidad();
            carrito.add(new Producto(comboSeleccionado.nombre, comboSeleccionado.precioUnitario, comboSeleccionado.butaca, cantidad));
            System.out.println(cantidad + " " + comboSeleccionado.nombre + " agregados a su carrito.");
            pedirdatoscompra();

        }
    }

    public static void agregarComboFamiliar() {
        System.out.println("\nElija un Combo Familiar:");
        for (int i = 0; i < combosFamiliares.size(); i++) {
            Producto combo = combosFamiliares.get(i);
            System.out.println((i + 1) + ". " + combo.nombre + " - S/ " + combo.precioUnitario + " (" + combo.butaca + ")");
        }
        System.out.println((combosFamiliares.size() + 1) + ". Regresar");

        int opcion = pedirOpcion(combosFamiliares.size() + 1);

        if (opcion == combosFamiliares.size() + 1) {

        } else {
            Producto comboSeleccionado = combosFamiliares.get(opcion - 1);
            System.out.println("¿Cuántos " + comboSeleccionado.nombre + " desea?");
            int cantidad = pedirCantidad();
            carrito.add(new Producto(comboSeleccionado.nombre, comboSeleccionado.precioUnitario, comboSeleccionado.butaca, cantidad));
            System.out.println(cantidad + " " + comboSeleccionado.nombre + " agregados a su carrito.");
            pedirdatoscompra();

        }
    }

    public static void agregarmixto() {
        System.out.println("\nElija un Combo Familiar:");
        for (int i = 0; i < mixto.size(); i++) {
            Producto combo = mixto.get(i);
            System.out.println((i + 1) + ". " + combo.nombre + " - S/ " + combo.precioUnitario + " (" + combo.butaca + ")");
        }
        System.out.println((mixto.size() + 1) + ". Regresar");

        int opcion = pedirOpcion(mixto.size() + 1);

        if (opcion == mixto.size() + 1) {

        } else {
            Producto comboSeleccionado = mixto.get(opcion - 1);
            System.out.println("¿Cuántos " + comboSeleccionado.nombre + " desea?");
            int cantidad = pedirCantidad();
            carrito.add(new Producto(comboSeleccionado.nombre, comboSeleccionado.precioUnitario, comboSeleccionado.butaca, cantidad));
            System.out.println(cantidad + " " + comboSeleccionado.nombre + " agregados a su carrito.");

        }
        pedirdatoscompra();
    }

    public static int pedirCantidad() {
        int cantidad;
        while (true) {
            try {
                System.out.println("Ingrese la cantidad:");
                cantidad = Integer.parseInt(chuqui.nextLine());
                if (cantidad <= 0) {
                    System.out.println("Por favor ingrese una cantidad válida.");
                } else {
                    return cantidad;
                }
            } catch (Exception e) {
                System.out.println("Por favor ingrese un número válido.");
            }
        }
    }


    public static void inicializarMapaButacas() {
        for (int i = 0; i < mapaButaca.length; i++) {
            for (int j = 0; j < mapaButaca[i].length; j++) {
                mapaButaca[i][j] = "○";
            }
        }
    }

    public static void mostrarCarrito() {
        System.out.println("\nCarrito de compras:");
        double total = 0;
        for (Producto producto : carrito) {
            System.out.println(producto.cantidad + "--" + producto.nombre + " - " + producto.butaca + " - S/ " + producto.getPrecioTotal());
            total += producto.getPrecioTotal();
        }
        System.out.println("Total: S/ " + total);
    }

    public static void pedirdatoscompra() {
        mostrarCarrito();
        Scanner sc = new Scanner(System.in);
        System.out.println("""
                ================================================================
                🎬   ¡ CinePlanet! La mejor experiencia cinematográfica  🎥
                ================================================================
                ✨ ¡Completa tu compra para disfrutar de tus películas favoritas! ✨
                ================================================================
                """);


        System.out.print("\n🌟 Por favor, ingresa los siguientes datos para completar tu compra:\n");

        System.out.print("💎 Nombre completo: ");
        String nombre1 = sc.nextLine();

        System.out.print("📧 Correo electrónico: ");
        String correo = sc.nextLine();

        String telefono = "";
        int intentos = 0;

        while (intentos < 3) {
            System.out.print("\n📱 Ingresa tu número de teléfono (9 dígitos): ");
            telefono = sc.nextLine();

            if (telefono.length() == 9) {
                System.out.println("\n✔️ ¡Número de teléfono registrado correctamente!");
                break;
            } else {
                intentos++;
                System.out.println("❌ Número incorrecto. El número debe tener 9 dígitos.");
                System.out.println("Intento " + intentos + " de 3.");
                System.out.println("---------------------------------------------------------------");
            }
        }

        if (intentos == 3) {
            System.out.println("\n🚫 ¡Usuario bloqueado por 24 horas debido a intentos fallidos!");
            System.exit(0);
        }

        seleccionarMetodoPago(sc, correo, nombre1, telefono);
    }

    public static void seleccionarMetodoPago(Scanner sc, String correo, String nombre1, String telefono) {
        boolean pagoCompletado = false;


        while (!pagoCompletado) {
            System.out.println("\n====================================");
            System.out.println("⚡  Selecciona tu método de pago ⚡");
            System.out.println("====================================");
            System.out.println("1: 💳 Tarjeta de crédito/débito");
            System.out.println("2: 💸 Pago contra entrega");
            System.out.println("====================================");
            System.out.print("Elige una opción (1 o 2): ");

            int metodoPago = sc.nextInt();
            sc.nextLine();


            switch (metodoPago) {
                case 1:
                    procesarPagoConTarjeta(sc, telefono);
                    pagoCompletado = true;
                    break;

                case 2:
                    procesarPagoEnEfectivo(sc, telefono);
                    break;

                default:
                    System.out.println("❌ Opción no válida. Por favor, selecciona una opción válida (1 o 2).");
                    System.out.println("-----------------------------------------------------");
                    break;
            }
        }
        mostrarRecibo(nombre1, correo);
    }

    private static boolean procesarPagoConTarjeta(Scanner sc, String telefono) {
        boolean pagoAceptado= false;
        long tarjeta;


        System.out.println("\n=====================================");
        System.out.println("💳 Ingreso de datos para el pago con tarjeta 💳");
        System.out.println("=====================================");


        while (true) {
            System.out.print("🔢 Número de tarjeta (16 dígitos): ");
            tarjeta = sc.nextLong();
            if (String.valueOf(tarjeta).length() == 16) {
                break;
            }
            System.out.println("❌ Error: El número de tarjeta debe contener exactamente 16 dígitos numéricos.");
        }
        sc.nextLine();


        System.out.print("👤 Nombre en la tarjeta: ");
        String titular = sc.nextLine();


        String fecha;
        while (true) {
            System.out.print("📅 Fecha de vencimiento (MM/AA): ");
            fecha = sc.nextLine();
            if (fecha.length() == 5 && fecha.charAt(2) == '/') {
                break;
            }
            System.out.println("❌ Error: La fecha de vencimiento debe estar en formato MM/AA.");
        }


        int cvv;
        while (true) {
            System.out.print("🔒 CVV (3 dígitos): ");
            cvv = sc.nextInt();
            if (String.valueOf(cvv).length() == 3) {
                break;
            }
            System.out.println("❌ Error: El CVV debe contener exactamente 3 dígitos numéricos.");
        }


        System.out.println("\n=====================================");
        System.out.println("🔄 Procesando el pago...");
        System.out.println("=====================================");
        System.out.println("💳 Tarjeta " + String.valueOf(tarjeta).substring(0, 4) + " **** **** **** procesada correctamente.");
        System.out.println("🗓️ Fecha de vencimiento: " + fecha);
        System.out.println("✅ ¡Pago exitoso!");
        System.out.println("=====================================");

        return pagoAceptado;
    }
    private static boolean procesarPagoEnEfectivo(Scanner sc, String telefono) {
        int intentos = 0;
        boolean pagoAceptado = false;

        while (!pagoAceptado && intentos <= 3) {
            System.out.println("Ingrese su dirección de entrega:");
            System.out.print("Departamento: ");
            String departamento = sc.nextLine();
            System.out.print("Provincia: ");
            String provincia = sc.nextLine();
            System.out.print("Distrito: ");
            String distrito = sc.nextLine();
            System.out.print("Calle: ");
            String calle = sc.nextLine();
            System.out.print("Número de dirección: ");
            String numero = sc.nextLine();
            System.out.print("Referencia: ");
            String referencia = sc.nextLine();

            double total = carrito.stream().mapToDouble(Producto::getPrecioTotal).sum();
            System.out.println("Costo total: S/. " + String.format("%.2f", total));
            System.out.print("Con cuánto pagará (S/.): ");
            double moneda = sc.nextDouble();

            if (moneda >= total) {
                double vuelto = moneda - total;
                System.out.println("Su vuelto será entregado por el delivery: S/" + String.format("%.2f", vuelto));
                System.out.println("Su pedido será enviado a: "+ departamento+" - " + provincia+ "- "+distrito+" - "+calle+numero);
                System.out.println("Con el costo total de: S/" + String.format("%.2f", total));
                pagoAceptado = true;
            } else {
                intentos++;
                if (intentos < 3) {
                    System.out.println("El monto ingresado es insuficiente. Intente de nuevo.");
                } else {
                    System.out.println("Número máximo de intentos alcanzado. ¡Pedido cancelado!");
                }
            }
            System.out.println("""
                                __________________________________________________________________
                                ||                                                              ||
                                """);
            System.out.println("""
                                ||                     DESTINO DE LA ENTREGA                    ||
                                ||--------------------------------------------------------------||
                                ||--------------------------------------------------------------||
                                """);
            System.out.println("||       DEPARTAMENTO  ===>  "+departamento+"------------------||");
            System.out.println("||       PROVINCIA     ===>  "+ provincia+"------------------  ||");
            System.out.println("||       DISTRITO      ===>  "+ distrito+"---------------------||");
            System.out.println("||       DIRECCION     ===>   "+calle+ numero+"-----------------||" );
            System.out.println("||       REFERENCIA    ===>  "+referencia+"---------------------||");
            System.out.println("||-------------------------------------------------------------||");
            System.out.println("----------envio en camino.....................");
            System.out.println("||     entrega maxima den 72 horas el");
            System.out.println("||     el delivery se comunicara a : "+telefono);
            System.out.println("||     porfavor estar al tanto");
            System.out.println("""
                                ||                                                              ||
                                ||______________________________________________________________||
                                """);
        }

        return pagoAceptado;
    }

    private static void mostrarRecibo(String nombre1, String correo) {
        String userHome = System.getProperty("user.home");
        String downloadFolder = Paths.get(userHome, "Downloads", "recibo_compra.txt").toString();

        try (BufferedWriter writer = new BufferedWriter(new FileWriter(downloadFolder))) {
            writer.write("""
                    \n__________________________________________________________________________________________________________________________
                    ||                                                                                                                         ||
                    """);
            System.out.println("""
                    \n__________________________________________________________________________________________________________________________
                    ||                                                                                                                         ||
                    """);
            writer.write("\n||     --- RECIBO DE COMPRA ---");
            System.out.println("||     --- RECIBO DE COMPRA ---");
            for (Producto producto : carrito) {
                System.out.println(producto.butaca);
            }
            LocalDateTime ahora = LocalDateTime.now();
            writer.write("\n||         Nombre del cliente: " + nombre1);
            System.out.println("||         Nombre del cliente: " + nombre1);
            writer.write("\n||         Correo electrónico: " + correo);
            System.out.println("||         Correo electrónico: " + correo);
            writer.write("\n||         Productos comprados:\n");
            System.out.println("||         Productos comprados:\n");
            double preciototal = 0;
            for (Producto producto : carrito) {
                preciototal += producto.getPrecioTotal();
                writer.write("\n||" +producto.cantidad+" : " + producto.nombre + " | Precio total: S/. " + String.format("%.2f", producto.getPrecioTotal()) );
                System.out.println("||" +producto.cantidad +" : "+ producto.nombre + " | Precio total: S/. " + String.format("%.2f", producto.getPrecioTotal()) );
            }
            double precioigv = 0.18 * preciototal;
            double preciofinish = preciototal - precioigv;

            writer.write("\n||-------------------------------------------------------------------------------------------------------------------||");
            System.out.println("||-------------------------------------------------------------------------------------------------------------------||");
            writer.write("\n||               COSTO del producto (sin IGV)  =  S/. " + String.format("%.2f", preciofinish));
            System.out.println("||               COSTO del producto (sin IGV)  =  S/. " + String.format("%.2f", preciofinish));
            writer.write("\n||               COSTO del IGV (18%)           =  S/. " + String.format("%.2f", precioigv));
            System.out.println("||               COSTO del IGV (18%)           =  S/. " + String.format("%.2f", precioigv));
            writer.write("\n||____________________________________________________________________________________________________________________||");
            System.out.println("||____________________________________________________________________________________________________________________||");
            writer.write("\n||               Total a pagar                =  S/. " + String.format("%.2f", preciototal));
            System.out.println("||               Total a pagar                =  S/. " + String.format("%.2f", preciototal));
            writer.write("\n||____________________________________________________________________________________________________________________||");
            System.out.println("||____________________________________________________________________________________________________________________||");


            DateTimeFormatter formato = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            String fecha = ahora.format(formato);
            writer.write("                   \nrecibo generado :   " + fecha);
            System.out.println("                      recibo generado :   " + fecha);
            System.out.println();
            writer.write("\n                                                 Gracias por su compra en COOLBOX!");
            System.out.println("                                                 Gracias por su compra en COOLBOX!");
            writer.write("\n                                    ¡Vuelva pronto!");
            System.out.println("                                    ¡Vuelva pronto!");
            writer.write("\n                                             FELIZ NAVIDAD 🎅🎄");
            System.out.println("                                             FELIZ NAVIDAD 🎅🎄");

            System.out.println("            el recibo se almaceno en : " + downloadFolder);
        } catch (IOException e) {
            System.err.println("                    error de sistema 404 : " + e.getMessage());
        }
    }

}
